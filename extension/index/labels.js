var labelsIndex=[["-Cprefer-dynamic","Codegen option: Prefer dynamic linking to static linking."],["-Zbuild-std","Unstable Cargo option: Compile the standard library yourself."],["-Zdebuginfo-compression","Unstable option: debuginfo compression"],["-Zdump-mir","Unstable option: Dump MIR."],["-Zdwarf-version","Unstable option: set dwarf version"],["-Zfmt-debug","Unstable option: fmt-debug"],["-Zmetrics-dir","Unstable option: metrics directory"],["-Znormalize-docs","Unstable rustdoc option: Normalize/evaluate types when generating docs"],["-Zpolymorphize","Unstable option: Polymorphization."],["-Zrandomize-layout","Unstable option: Randomize the layout of types."],["-Zshare-generics","Unstable options: Share generic instantiations."],["-Zterminal-urls","Unstable option: emit OSC8 hyperlinks in diagnostics"],["-Zthir-unsafeck","Unstable option: THIR unsafeck"],["-Ztrace-macros","Unstable option: trace-macros"],["-Zvalidate-mir","Unstable option: MIR validation"],["A-a11y","Area: Anything to do with accessibility"],["A-ABI","Area: Concerning the application binary interface (ABI)"],["A-align","Area: alignment control (`repr(align(N))` and so on)"],["A-allocators","Area: Custom and system allocators"],["A-array","Area: `[T; N]`"],["A-associated-items","Area: Associated items (types, constants & functions)"],["A-ast","Area: AST"],["A-async-await","Area: Async & Await"],["A-atomic","Area: Atomics, barriers, and sync primitives"],["A-attributes","Area: Attributes (`#[â€¦]`, `#![â€¦]`)"],["A-auto-traits","Area: auto traits (e.g., `auto trait Send {}`)"],["A-autovectorization","Area: Autovectorization, which can impact perf or code size"],["A-backtrace","Area: Backtraces"],["A-bootstrap-config","Area: bootstrap `config.toml` and the config system"],["A-bootstrap-stages","Area: issues with the meaning of stage numbers"],["A-bootstrap-stamp","Area: bootstrap stamp logic"],["A-bootstrap-tracing","Area: bootstrap tracing"],["A-borrow-checker","Area: The borrow checker"],["A-box","Area: Our favorite opsem complication"],["A-cfg","Area: `cfg` conditional compilation"],["A-CI","Area: Our Github Actions CI"],["A-CLI","Area: Command-line interface (CLI) to the compiler"],["A-clippy","Area: Clippy"],["A-closures","Area: Closures (`|â€¦| { â€¦ }`)"],["A-code-coverage","Area: Source-based code coverage (-Cinstrument-coverage)"],["A-codegen","Area: Code generation"],["A-coercions","Area: implicit and explicit `expr as Type` coercions"],["A-coherence","Area: Coherence"],["A-coinduction","Area: Concerning coinduction, most often for auto traits"],["A-collections","Area: `std::collection`"],["A-compiletest","Area: The compiletest test runner"],["A-compiletest-compare-modes","Area: compiletest compare-modes"],["A-compiletest-normalizations","Area: compiletest normalizations"],["A-concurrency","Area: Concurrency"],["A-const-eval","Area: Constant evaluation, covers all const contexts (static, const fn, ...)"],["A-const-generics","Area: const generics (parameters and arguments)"],["A-const-prop","Area: Constant propagation"],["A-contributor-roadblock","Area: Makes things more difficult for new contributors to rust itself"],["A-control-flow","Area: Control flow"],["A-coroutines","Area: Coroutines"],["A-cranelift","Things relevant to the [future] cranelift backend"],["A-crate-compat","Area: Impacting SemVer compatibility of crates in the ecosystem"],["A-crates","Area: Crates and their interactions (like crate loading)"],["A-cross","Area: Cross compilation"],["A-cross-crate-reexports","Area: Documentation that has been re-exported from a different crate"],["A-debuginfo","Area: Debugging information in compiled programs (DWARF, PDB, etc.)"],["A-destructors","Area: Destructors (`Drop`, â€¦)"],["A-diagnostics","Area: Messages for errors, warnings, and lints"],["A-doc-alias","Area: `#[doc(alias)]`"],["A-doc-coverage","Area: Calculating how much of a crate has documentation"],["A-docs","Area: Documentation for any part of the project, including the compiler, standard library, and tools"],["A-doctests","Area: Documentation tests, run by rustdoc"],["A-download-rustc","Area: The `rust.download-rustc` build option."],["A-driver","Area: rustc_driver that ties everything together into the `rustc` compiler"],["A-DSTs","Area: Dynamically-sized types (DSTs)"],["A-dyn-compatibility","Area: Dyn compatibility (formerly: object safety)"],["A-dynamic-library","Area: Dynamic/Shared Libraries"],["A-edition-2015","Area: The 2015 edition (the first edition)"],["A-edition-2018","Area: The 2018 edition"],["A-edition-2021","Area: The 2021 edition"],["A-edition-2024","Area: The 2024 edition"],["A-edition-2027","Area: The 2027 edition (TBD)"],["A-enum","ðŸ¤“ akshually it's an \"ADT\" or \"algebraic data type\""],["A-error-codes","Area: Explanation of an error code (--explain)"],["A-error-handling","Area: Error handling"],["A-exhaustiveness-checking","Relating to exhaustiveness / usefulness checking of patterns"],["A-extern-fn","Area: `extern` functions"],["A-FFI","Area: Foreign function interface (FFI)"],["A-filesystem","Area: `std::fs`"],["A-floating-point","Area: Floating point numbers and arithmetic"],["A-fmt","Area: `core::fmt`"],["A-frontend","Area: Compiler frontend (errors, parsing and HIR)"],["A-GATs","Area: Generic associated types (GATs)"],["A-gcc","Things relevant to the [future] GCC backend"],["A-git","Area: `git`-related shenanigans (usually bootstrap related)"],["A-github-actions","Area: GitHub Actions (GHA)"],["A-grammar","Area: The grammar of Rust"],["A-hardware-interrupts","Area: Code for handling the \"interrupt ABI\" of various processors"],["A-higher-ranked","Area: Higher-ranked things (e.g., lifetimes, types, trait bounds aka HRTBs)"],["A-HIR","Area: The high-level intermediate representation (HIR)"],["A-hygiene","Area: Macro hygiene"],["A-impl-trait","Area: `impl Trait`. Universally / existentially quantified anonymous types with static dispatch."],["A-implied-bounds","Area: Implied bounds / inferred outlives-bounds"],["A-incr-comp","Area: Incremental compilation"],["A-inference","Area: Type inference"],["A-inline-assembly","Area: Inline assembly (`asm!(â€¦)`)"],["A-intra-doc-links","Area: Intra-doc links, the ability to link to items in docs by name"],["A-intrinsics","Area: Intrinsics"],["A-io","Area: `std::io`, `std::fs`, `std::net` and `std::path`"],["A-iterators","Area: Iterators"],["A-lang-item","Area: Language items"],["A-layout","Area: Memory layout of types"],["A-lazy-normalization","Area: Lazy normalization (tracking issue: #60471)"],["A-libtest","Area: `#[test]` / the `test` library"],["A-licensing","Area: Compiler licensing"],["A-lifetimes","Area: Lifetimes / regions"],["A-link-to-definition","rustdoc --generate-link-to-definition nightly-only feature"],["A-linkage","Area: linking into static, shared libraries and binaries"],["A-linkers","Area: linkers... you gotta love linkers"],["A-lints","Area: Lints (warnings about flaws in source code) such as unused_mut."],["A-LLVM","Area: Code generation parts specific to LLVM. Both correctness bugs and optimization-related issues."],["A-local-reexports","Area: Documentation that has been locally re-exported (i.e., non-cross-crate)"],["A-LTO","Area: Link-time optimization (LTO)"],["A-macros","Area: All kinds of macros (custom derive, macro_rules!, proc macros, ..)"],["A-macros-1.2","Area: Declarative macros 1.2"],["A-macros-2.0","Area: Declarative macros 2.0 (#39412)"],["A-markdown-parsing","Area: Markdown parsing for doc-comments"],["A-maybe-future-edition","Something we may consider for a future edition."],["A-meta","Area: Issues & PRs about the rust-lang/rust repository itself"],["A-metadata","Area: Crate metadata"],["A-metrics","Area: Metrics"],["A-MIR","Area: Mid-level IR (MIR) - https://blog.rust-lang.org/2016/04/19/MIR.html"],["A-mir-opt","Area: MIR optimizations"],["A-mir-opt-GVN","Area: MIR opt Global Value Numbering (GVN)"],["A-mir-opt-inlining","Area: MIR inlining"],["A-mir-opt-nrvo","Fixed by the Named Return Value Opt. (NRVO)"],["A-miri","Area: The miri tool"],["A-monomorphization","Area: Monomorphization"],["A-naked","Area: `#[naked]`, prologue and epilogue-free, functions, https://git.io/vAzzS"],["A-name-mangling","Area: name mangling / decoration"],["A-NLL","Area: Non-lexical lifetimes (NLL)"],["A-panic","Area: Panicking machinery"],["A-parallel-queries","Area: Parallel query execution"],["A-parser","Area: The parsing of Rust source code to an AST"],["A-path-remapping","Area: path remapping, --remap-path-prefix, --remap-cwd-prefix, --remap-diagnostics-scope etc."],["A-patterns","Relating to patterns and pattern matching"],["A-permissions","Area: filesystem perms and other kind of permissions"],["A-PGO","Area: Profile-guided optimizations (PGO)"],["A-pin","Area: Pin"],["A-plugins","Area: compiler plugins, doc.rust-lang.org/nightly/unstable-book/language-features/plugin.html"],["A-pretty","Area: Pretty printing (including `-Z unpretty`)"],["A-proc-macro-back-compat","Area: Backwards compatibility hacks for proc macros"],["A-proc-macros","Area: Procedural macros"],["A-process","Area: `std::process` and `std::env`"],["A-profile-rt","Area: The profiler runtime for llvm-profdata and llvm-cov"],["A-python","Area: python, like bootstrap/CI scripts or linters/formatters, etc."],["A-query-system","Area: The rustc query system (https://rustc-dev-guide.rust-lang.org/query.html)"],["A-raw-pointers","Area: raw pointers, MaybeUninit, NonNull"],["A-reachable-priv","Issues involving private types that are indirectly reachable or effect the public api"],["A-repr","Area: the `#[repr(stuff)]` attribute"],["A-repr-packed","Area: the naughtiest repr"],["A-reproducibility","Area: Reproducible / deterministic builds"],["A-resolve","Area: Name/path resolution done by `rustc_resolve` specifically"],["A-result-option","Area: Result and Option combinators"],["A-run-make","Area: port run-make Makefiles to rmake.rs"],["A-runtime","Area: std's runtime and \"pre-main\" init for handling backtraces, unwinds, stack overflows"],["A-rust-for-linux","Relevant for the Rust-for-Linux project"],["A-rustc-dev-guide","Area: rustc-dev-guide"],["A-rustdoc-js","Area: Rustdoc's JS front-end"],["A-rustdoc-json","Area: Rustdoc JSON backend"],["A-rustdoc-scrape-examples","Area: The (unstable) rustdoc scrape-examples feature described in RFC 3123"],["A-rustdoc-search","Area: Rustdoc's search feature"],["A-rustdoc-themes","Area: Themes for HTML pages generated by rustdoc"],["A-rustdoc-type-layout","Area: `rustdoc --show-type-layout` (nightly-only)"],["A-rustdoc-ui","Area: Rustdoc UI (generated HTML)"],["A-rustfmt","Area: Rustfmt"],["A-sanitizers","Area: Sanitizers for correctness and code quality"],["A-save-analysis","Area: saving results of analyses such as inference and borrowck results to a file."],["A-security","Area: Security (example: address space layout randomization)."],["A-self-profile","Area: Self-profiling feature of the compiler"],["A-SIMD","Area: SIMD (Single Instruction Multiple Data)"],["A-slice","Area: `[T]`"],["A-slice-patterns","Area: Slice patterns, https://github.com/rust-lang/rust/issues/23121"],["A-specialization","Area: Trait impl specialization"],["A-spurious","Area: Spurious failures in builds (spuriously == for no apparent reason)"],["A-stability","Area: `#[stable]`, `#[unstable]` etc."],["A-stable-MIR","Area: stable MIR"],["A-stack-probe","Area: Stack probing and guard pages"],["A-str","Area: str and String"],["A-strict-provenance","Area: Strict provenance for raw pointers"],["A-suggestion-diagnostics","Area: Suggestions generated by the compiler applied by `cargo fix`"],["A-syntaxext","Area: Syntax extensions"],["A-synthetic-impls","Area: Synthetic impls, used by rustdoc to document auto traits and traits with blanket impls"],["A-target-feature","Area: Enabling/disabling target features like AVX, Neon, etc."],["A-target-specs","Area: Compile-target specifications"],["A-targets","Area: Concerning the implications of different compiler targets"],["A-technical-debt","Area: Internal cleanup work"],["A-test-infra","Area: test infrastructure (may span bootstrap/compiletest/more)"],["A-testsuite","Area: The testsuite used to check the correctness of rustc"],["A-THIR","Area: Typed HIR"],["A-thread","Area: `std::thread`"],["A-thread-locals","Area: Thread local storage (TLS)"],["A-tidy","Area: The tidy tool"],["A-time","Area: Time"],["A-tool-attributes","Area: tool attributes like `#[rustfmt::skip]`"],["A-trait-objects","Area: trait objects, vtable layout"],["A-trait-system","Area: Trait system"],["A-translation","Area: Translation infrastructure, and migrating existing diagnostics to SessionDiagnostic"],["A-type-based-search","Area: Searching rustdoc pages using type signatures"],["A-type-system","Area: Type system"],["A-Unicode","Area: Unicode"],["A-valtree","Area: Value trees or fixed by value trees"],["A-variance","Area: Variance (https://doc.rust-lang.org/nomicon/subtyping.html)"],["A-visibility","Area: Visibility / privacy"],["A-zst","Area: Zero-sized types (ZST)."],["april-1st","Started on the 1st of April"],["AsyncAwait-Polish","Async-await issues that are part of the \"polish\" area"],["AsyncAwait-Triaged","Async-await issues that have been triaged during a working group meeting."],["B-experimental","Blocker: In-tree experiment; RFC pending, not yet approved or unneeded."],["B-MCP-approved","Blocker: Approved by an accepted MCP."],["B-RFC-approved","Blocker: Approved by a merged RFC but not yet implemented."],["B-RFC-implemented","Blocker: Approved by a merged RFC and implemented."],["B-unstable","Blocker: Implemented in the nightly compiler and unstable."],["beta-accepted","Accepted for backporting to the compiler in the beta channel."],["beta-nominated","Nominated for backporting to the compiler in the beta channel."],["C-bug","Category: This is a bug."],["C-cleanup","Category: PRs that clean code up or issues documenting cleanup."],["C-defective-hardware","Category: Issue that was filed as a possible software bug but is actually defective hardware"],["C-discussion","Category: Discussion or questions that doesn't represent real issues."],["C-enhancement","Category: An issue proposing an enhancement or a PR with one."],["C-external-bug","Category: issue that is caused by bugs in software beyond our control"],["C-feature-accepted","Category: A feature request that has been accepted pending implementation."],["C-feature-request","Category: A feature request, i.e: not implemented / a PR."],["C-future-incompatibility","Category: Future-incompatibility lints"],["C-gub","Category: the reverse of a compiler bug is generally UB"],["C-optimization","Category: An issue highlighting optimization opportunities or PRs implementing such"],["C-tracking-issue","Category: An issue tracking the progress of sth. like the implementation of an RFC"],["call-for-testing","Marks issues that require broader testing from the community, e.g. before stabilization."],["CI-ABA-ptr-provenance-lockless-queue-fail","CI spurious failure: related to #121950"],["CI-spurious-fail-mingw","CI spurious failure: target env mingw"],["CI-spurious-fail-msvc","CI spurious failure: target env msvc"],["CI-spurious-x86_64-apple-SIGSEGV-SIGILL","CI spurious failure: SIGSEGV/SIGILL while building rustc itself on x86_64-apple"],["const-generics-bad-diagnostics","An error is correctly emitted, but is confusing, for `min_const_generics`."],["D-confusing","Diagnostics: Confusing error or lint that should be reworked."],["D-crate-version-mismatch","Diagnostics: Errors or lints caused be the use of two different crate versions."],["D-diagnostic-infra","Diagnostics: Issues that affect all diagnostics, or relate to the diagnostic machinery itself."],["D-edition","Diagnostics: An error or lint that should account for edition differences."],["D-imprecise-spans","Diagnostics: spans don't point to exactly the erroneous code"],["D-inconsistent","Diagnostics: Inconsistency in formatting, grammar or style between diagnostic messages."],["D-incorrect","Diagnostics: A diagnostic that is giving misleading or incorrect information."],["D-invalid-suggestion","Diagnostics: A structured suggestion resulting in incorrect code."],["D-newcomer-roadblock","Diagnostics: Confusing error or lint; hard to understand for new users."],["D-papercut","Diagnostics: An error or lint that needs small tweaks."],["D-terse","Diagnostics: An error or lint that doesn't give enough information about the problem at hand."],["D-Unicode-unaware","Diagnostics: Diagnostics that are unaware of Unicode and trigger codepoint boundary assertions"],["D-verbose","Diagnostics: Too much output caused by a single piece of incorrect code."],["disposition-close","This PR / issue is in PFCP or FCP with a disposition to close it."],["disposition-merge","This issue / PR is in PFCP or FCP with a disposition to merge it."],["disposition-postpone","This issue / PR is in PFCP or FCP with a disposition to postpone it."],["E-easy","Call for participation: Easy difficulty. Experience needed to fix: Not much. Good first issue."],["E-hard","Call for participation: Hard difficulty. Experience needed to fix: A lot."],["E-help-wanted","Call for participation: Help is requested to fix this issue."],["E-medium","Call for participation: Medium difficulty. Experience needed to fix: Intermediate."],["E-mentor","Call for participation: This issue has a mentor. Use #t-compiler/help on Zulip for discussion."],["E-needs-bisection","Call for participation: This issue needs bisection: https://github.com/rust-lang/cargo-bisect-rustc"],["E-needs-design","This issue needs exploration and design to see how and if we can fix/implement it"],["E-needs-investigation","Call for partcipation: This issues needs some investigation to determine current status"],["E-needs-mcve","Call for participation: This issue has a repro, but needs a Minimal Complete and Verifiable Example"],["E-needs-stack","Call for participation: This issue needs a stacktrace."],["E-needs-test","Call for participation: An issue has been fixed and does not reproduce, but no test has been added."],["E-tedious","Call for participation: An issue involves lots of work and is better handled as many small tasks."],["F-abi_c_cmse_nonsecure_call","`#![feature(abi_c_cmse_nonsecure_call)]`"],["F-abi_x86_interrupt",""],["F-adt_const_params","`#![feature(adt_const_params)]`"],["F-allow_internal_unstable","`#![feature(allow_internal_unstable)]`"],["F-anonymous_lifetime_in_impl_trait","`#![feature(anonymous_lifetime_in_impl_trait)]`"],["F-anonymous_pipe","`#![feature(anonymous_pipe)]`"],["F-arbitrary_self_types","`#![feature(arbitrary_self_types)]`"],["F-array_repeat","`#![feature(array_repeat)]`"],["F-asm","`#![feature(asm)]` (not `llvm_asm`)"],["F-associated_const_equality","`#![feature(associated_const_equality)]`"],["F-associated_type_bounds","`#![feature(associated_type_bounds)]`"],["F-associated_type_defaults","`#![feature(associated_type_defaults)]`"],["F-async_closure","`#![feature(async_closure)]`"],["F-async_drop","Async drop"],["F-async_fn_in_dyn_trait","`#![feature(async_fn_in_dyn_trait)]`"],["F-async_fn_in_trait","Static async fn in traits"],["F-async_fn_traits","`#![feature(async_fn_traits)]`"],["F-async_for_loop","`#![feature(async_for_loop)]`"],["F-auto_traits","`#![feature(auto_traits)]`"],["F-autodiff","`#![feature(autodiff)]`"],["F-batching","`#![feature(batching)]`"],["F-bindings_after_at","`#![feature(bindings_after_at)]`"],["F-box_patterns","`#![feature(box_patterns)]`"],["F-box_uninit_write",""],["F-bufreader_peek","`#![feature(bufreader_peek)]`"],["F-c_str_literals","`#![feature(c_str_literals)]`"],["F-c_unwind","`#![feature(c_unwind)]`"],["F-c_variadic","`#![feature(c_variadic)]`"],["F-cfg_accessible","`#![feature(cfg_accessible)]`"],["F-cfg_version","`#![feature(cfg_version)]`"],["F-check-cfg","--check-cfg"],["F-closure_lifetime_binder","`#![feature(closure_lifetime_binder)]`"],["F-cmse_nonsecure_entry","`#![feature(cmse_nonsecure_entry)]`"],["F-coerce_unsized","The `CoerceUnsized` trait"]];export default labelsIndex;